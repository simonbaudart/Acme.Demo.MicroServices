// -----------------------------------------------------------------------
//  <copyright file="ChristopherHennuyezRandomPatternDrawing.cs" company="Acme">
//  Copyright (c) Acme. All rights reserved.
//  </copyright>
// -----------------------------------------------------------------------

namespace Acme.Demo.MicroServices.DrawerWavenet.Drawers
{
    using System;
    using System.Drawing;

    using Acme.Demo.MicroService;

    public enum Pattern {
        square, leftWing, rightWing, sShape, zShape, podium
    }

    public class ChristopherHennuyezRandomPatternDrawing: IDrawPicture
    {
        private Bitmap _bitmap;
        private int[,] _sign = new int[,] {
            {0,0,0,0,0,0,0,0,0},
            {0,1,1,1,1,1,0,0,0},
            {0,1,0,0,0,0,0,0,0},
            {0,1,0,0,1,0,0,1,0},
            {0,1,0,0,1,0,0,1,0},
            {0,1,1,1,1,1,1,1,0},
            {0,0,0,0,1,0,0,1,0},
            {0,0,0,0,1,0,0,1,0},
            {0,0,0,0,0,0,0,0,0}
        };

        public Bitmap Draw(int height, int width)
        {
            if (width >= 1000 && height >= 1000 && width <= 6000 && height <= 6000) {
                // Create new bitmap
                int x, y, i, j, k, l;
                Random rand = new Random();
                _bitmap = new Bitmap(width, height);
                Color color;

                Console.WriteLine($"Drawing bitmap with inputed height/width values ! ({height}, {width})");

                // Horizontal
                for(x=0; x<=width-24; x+=24)
                {
                    // Vertical
                    for(y=0; y<=height-24; y+=24)
                    {
                        int colorToSkip = rand.Next(5);
                        Pattern shapeIndex = (Pattern) rand.Next(6);
                        int[,] shape;
                        switch (shapeIndex) {
                            default:
                            case Pattern.square:
                                shape = new int[24,24] {
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                };
                                break;
                            case Pattern.leftWing:
                                shape = new int[24,24] {
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
                                    {0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0},
                                    {0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0},
                                    {0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0},
                                    {0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0},
                                    {0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0},
                                    {0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                };
                                break;
                            case Pattern.rightWing:
                                shape = new int[24,24] {
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
                                    {0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0},
                                    {0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0},
                                    {0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0},
                                    {0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0},
                                    {0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0},
                                    {0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
                                    {0,0,2,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,2,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,2,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,2,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,2,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                };
                                break;
                            case Pattern.sShape:
                                shape = new int[24,24] {
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                };
                                break;
                            case Pattern.zShape:
                                shape = new int[24,24] {
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0},
                                    {0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0},
                                    {0,0,0,0,0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0,0,0},
                                    {0,0,0,0,0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0,0,0},
                                    {0,0,0,0,0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0,0,0},
                                    {0,0,0,0,0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0,0,0},
                                    {0,0,0,0,0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0,0,0},
                                    {0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0},
                                    {0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                };
                                break;
                            case Pattern.podium:
                                shape = new int[24,24] {
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0},
                                    {0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
                                    {0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0},
                                    {0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0},
                                    {0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0},
                                    {0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0},
                                    {0,0,2,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,2,0,0,0},
                                    {0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                };
                                break;
                        }
                        switch (colorToSkip) {
                            default:
                            case 0:
                                color = Color.FromArgb(0, 255, 255);
                                break;
                            case 1 :
                                color = Color.FromArgb(255, 0, 255);
                                break;
                            case 2 :
                                color = Color.FromArgb(255, 255, 0);
                                break;
                            case 3 :
                                color = Color.FromArgb(0, 0, 255);
                                break;
                            case 4 :
                                color = Color.FromArgb(0, 255, 0);
                                break;
                            case 5 :
                                color = Color.FromArgb(255, 0, 0);
                                break;
                        }
                        for (k=0; k<shape.GetLength(1); k++) {
                            for (l=0; l<shape.GetLength(0); l++) {
                                if (shape[k,l] == 1) {
                                    _bitmap.SetPixel(x+l, y+k, color);
                                } else if (shape[k,l] == 2) {
                                    _bitmap.SetPixel(x+l, y+k, Color.FromArgb(0, 0, 0));
                                } else {
                                    _bitmap.SetPixel(x+l, y+k, Color.FromArgb(100, 100, 100));
                                }
                            }
                        }
                    }
                }

                // Add sign
                for(i=0; i<this._sign.GetLength(0); i++) {
                    for(j=0; j<this._sign.GetLength(1); j++) {
                        if(this._sign[i,j] == 0) {
                            _bitmap.SetPixel((width - 10) + j, (height - 10) + i, Color.FromArgb(255, 255, 255));
                        } else {
                            _bitmap.SetPixel((width - 10) + j, (height - 10) + i, Color.FromArgb(0, 0, 0));
                        }
                    }
                }

                // Save the bitmap
                string name = @"%USERPROFILE%\\test.bmp";
                string filePath = Environment.ExpandEnvironmentVariables(name);
                _bitmap.Save(filePath);
                return _bitmap;
            } else {
                Console.WriteLine("Drawing bitmap with maximum height/width values ! (6000, 1000)");
                return this.Draw(4000, 4000);
            }
        }
    }
}